from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import pandas as pd
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import mean_squared_error
df=pd.read_csv('preprocessed_data.csv')
df
#Select features and target
X = df[['Price range', 'Votes', 'Cuisines']]  
y = df['Aggregate rating']
preprocessor = ColumnTransformer(
    transformers=[
        ('cuisines', OneHotEncoder(handle_unknown='ignore'), ['Cuisines'])  # One-hot encode the 'Cuisines' column
    ],
    remainder='passthrough'  
)

# Create a pipeline with preprocessing and the linear regression model
pipeline = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('regressor', LinearRegression())
])
# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Train the model
model = LinearRegression()
pipeline.fit(X_train, y_train)
predictions = pipeline.predict(X_test)
print("r2_score:", pipeline.score(X_test, y_test))
mse = mean_squared_error(y_test, predictions)
print(f" Mean squared error: {mse}")
# Plot actual vs. predicted values
import matplotlib.pyplot as plt
plt.scatter(y_test, y_pred)
plt.xlabel('Actual Ratings')
plt.ylabel('Predicted Ratings')
plt.title('Actual vs. Predicted Ratings')
plt.show()
